// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../src/prisma"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum Plans {
    FREE
    PREMIUM // 0 premium server included. 500 ai messages a day.
    PREMIUMPLUS // 1 premium server included. 1000 ai messages a day.
    PRO // 3 premium servers included. 1500 ai messages a day.
}

enum LogLevel {
    NONE // no logging at all
    MINIMAL // only moderator commands like ban and kick
    MEDIUM // included deleted messages and join/leave
    MAXIMUM // include edited messages and user updates (username, role etc.)
}

enum Sources {
    DISCORD
    DASHBOARD
}

enum IncidentsType {
    WARN
    KICK
    BAN
}

enum IncidentsStatus {
    OPEN
    APPEALED
    CLOSED
    REVOKED
}

enum Role {
    staff
    user
}

enum ProductType {
    onetime
    subscription
}

model Users {
    id                   String                @id @default(cuid())
    username             String                @unique
    email                String?               @unique
    extId                String?               @unique
    discordId            String                @unique
    role                 Role                  @default(user)
    customerId           String?               @unique
    premiumSubscriptions PremiumSubscriptions?
    plan                 Plans                 @default(FREE)
    limits               Limits?
    premiumServers       Servers[]
    cleoPersonalityName  String?
    cleoPersonalityId    String?
    cleoPersonality      CleoPersonalities?    @relation(fields: [cleoPersonalityName, cleoPersonalityId], references: [name, id])
}

model Limits {
    id                  String   @id
    date                DateTime
    aiUsed              Int      @default(0)
    aiLimit             Int      @default(20)
    additionalMessages  Int      @default(0)
    premiumServers      Int      @default(0)
    premiumServerLimmit Int      @default(0)
    user                Users    @relation(fields: [id], references: [id])
}

model Servers {
    id                  String             @id
    name                String
    ownerId             String
    icon                String?
    isPremium           Boolean            @default(false)
    premiumAddedBy      String?
    premiumUser         Users?             @relation(fields: [premiumAddedBy], references: [discordId])
    aiEnabled           Boolean            @default(false)
    welcomeChannel      String?
    announcementChannel String?
    updatesChannel      String?
    logsChannel         String?
    logLevel            LogLevel           @default(NONE)
    inviteLink          String?
    inviteCode          String?
    lastOpened          DateTime?
    cleoPersonalityName String?
    cleoPersonalityId   String?
    cleoPersonality     CleoPersonalities? @relation(fields: [cleoPersonalityName, cleoPersonalityId], references: [name, id])
    AutomodConfig       AutomodConfig[]

    @@index([lastOpened])
}

model PremiumSubscriptions {
    id        String   @id
    user      Users    @relation(fields: [id], references: [id])
    tier      Plans
    startDate DateTime @default(now())
    endDate   DateTime @default(dbgenerated("CURRENT_TIMESTAMP + INTERVAL '1 month'"))
    source    Sources
}

model ErrorLog {
    id         String   @id @default(cuid())
    process    String
    message    String
    stackTrace String
    timestamp  DateTime @default(now())
}

model Incidents {
    id          String          @id @default(cuid())
    serverId    String
    userId      String
    moderatorId String
    type        IncidentsType
    reason      String
    timestamp   DateTime        @default(now())
    status      IncidentsStatus @default(OPEN)
}

model CleoPersonalities {
    id           String    @id @default(cuid())
    name         String
    systemPrompt String
    Servers      Servers[]
    Users        Users[]

    @@unique([name, id])
}

model Products {
    id     String      @id // The stripe product id
    name   String      @unique
    type   ProductType
    prices Prices[]
}

model Prices {
    id        String   @id // The stripe price id
    amount    Int
    default   Boolean  @default(false)
    productId String
    product   Products @relation(fields: [productId], references: [id])
}

model AutomodConfig {
    id              String   @id @default(cuid())
    active          Boolean  @default(false)
    profanity       Boolean  @default(false)
    matureContent   Boolean  @default(false)
    links           Boolean  @default(false)
    ignoredChannels String[] @default([])
    approvedLinks   String[] @default([])
    guildId         String   @unique
    guild           Servers  @relation(fields: [guildId], references: [id])
}
