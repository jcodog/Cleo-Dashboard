// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Plans {
  FREE
  PREMIUM // 0 premium server included. 500 ai messages a day.
  PREMIUMPLUS // 1 premium server included. 1000 ai messages a day.
  PRO // 3 premium servers included. 1500 ai messages a day.
}

enum LogLevel {
  NONE // no logging at all
  MINIMAL // only moderator commands like ban and kick
  MEDIUM // included deleted messages and join/leave
  MAXIMUM // include edited messages and user updates (username, role etc.)
}

enum Sources {
  DISCORD
  DASHBOARD
}

model Users {
  id                   String                @id @default(cuid())
  username             String                @unique
  email                String?               @unique
  extId                String?               @unique
  discordId            String                @unique
  premiumSubscriptions PremiumSubscriptions?
  plan                 Plans                 @default(FREE)
  limits               Limits?
  premiumServers       Servers[]
}

model Limits {
  id                  String   @id
  date                DateTime
  aiUsed              Int      @default(0)
  aiLimit             Int      @default(20)
  additionalMessages  Int      @default(0)
  premiumServers      Int      @default(0)
  premiumServerLimmit Int      @default(0)
  user                Users    @relation(fields: [id], references: [id])
}

model Servers {
  id                  String   @id
  name                String
  ownerId             String
  isPremium           Boolean  @default(false)
  premiumAddedBy      String?
  premiumUser         Users?   @relation(fields: [premiumAddedBy], references: [discordId])
  aiEnabled           Boolean  @default(false)
  welcomeChannel      String?
  announcementChannel String?
  updatesChannel      String?
  logsChannel         String?
  logLevel            LogLevel @default(NONE)
  inviteLink          String?
  inviteCode          String?
}

model PremiumSubscriptions {
  id        String   @id
  user      Users    @relation(fields: [id], references: [id])
  tier      Plans
  startDate DateTime @default(now())
  endDate   DateTime @default(dbgenerated("CURRENT_TIMESTAMP + INTERVAL '1 month'"))
  source    Sources
}
